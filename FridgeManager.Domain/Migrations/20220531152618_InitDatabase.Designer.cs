// <auto-generated />
using System;
using FridgeManager.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FridgeManager.Domain.Migrations
{
    [DbContext(typeof(FridgeManagerDbContext))]
    [Migration("20220531152618_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FridgeManager.Domain.Models.Authorization.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "beed877e-5e92-46aa-851f-873f61ad825b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e768bb1-901f-472d-8791-39c7ee12fc3c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Login = "admin",
                            Password = "1111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae168a45-02b1-4ad1-bf04-70ee6bfda047",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("FridgeManager.Domain.Models.Fridge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Fridges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            ModelId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Name = "Atlant",
                            OwnerName = "Vlada"
                        },
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            ModelId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Name = "Phylips",
                            OwnerName = "Anna"
                        },
                        new
                        {
                            Id = new Guid("02ed6fb1-a1dd-4c14-8e2a-1f36558877f7"),
                            ModelId = new Guid("047a52f9-d94d-4358-ab3f-ee429221be4b"),
                            Name = "Samsung",
                            OwnerName = "Andrew"
                        },
                        new
                        {
                            Id = new Guid("5b954203-ce83-4d81-9635-fde5cea9170e"),
                            ModelId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Name = "Phylips",
                            OwnerName = "Polyna"
                        },
                        new
                        {
                            Id = new Guid("42498fda-616c-47bd-b045-b98cbab20d0c"),
                            ModelId = new Guid("047a52f9-d94d-4358-ab3f-ee429221be4b"),
                            Name = "Stinol",
                            OwnerName = "Nastya"
                        });
                });

            modelBuilder.Entity("FridgeManager.Domain.Models.FridgeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FridgeModels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Name = "TH-803",
                            Year = 2011
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Name = "514-NWE",
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("047a52f9-d94d-4358-ab3f-ee429221be4b"),
                            Name = "RC-55",
                            Year = 2015
                        });
                });

            modelBuilder.Entity("FridgeManager.Domain.Models.FridgeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FridgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("ProductId");

                    b.ToTable("FridgeProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb74712d-d2a3-4270-b633-360b121363ec"),
                            FridgeId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            ProductId = new Guid("d59a38ab-358a-4177-94c9-72f09f33fb32"),
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("7951fcbc-62dc-4138-81e4-0cac5c2b7e60"),
                            FridgeId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            ProductId = new Guid("fce56e5f-6719-4b19-a00e-0ab6ad0630b8"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("1a4f8023-1df7-4d41-8c7b-ae5c7b54f7f0"),
                            FridgeId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            ProductId = new Guid("40c30251-dbad-4078-8cae-db75cd69dfd0"),
                            Quantity = 25
                        },
                        new
                        {
                            Id = new Guid("50b08830-599e-42a9-a587-7d60b0611283"),
                            FridgeId = new Guid("5b954203-ce83-4d81-9635-fde5cea9170e"),
                            ProductId = new Guid("d59a38ab-358a-4177-94c9-72f09f33fb32"),
                            Quantity = 3
                        },
                        new
                        {
                            Id = new Guid("c51647bf-9f3b-48e6-a4dc-0396b5a5a869"),
                            FridgeId = new Guid("02ed6fb1-a1dd-4c14-8e2a-1f36558877f7"),
                            ProductId = new Guid("fce56e5f-6719-4b19-a00e-0ab6ad0630b8"),
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("49372f41-be0b-4c75-87bd-981f04bb1d16"),
                            FridgeId = new Guid("02ed6fb1-a1dd-4c14-8e2a-1f36558877f7"),
                            ProductId = new Guid("40c30251-dbad-4078-8cae-db75cd69dfd0"),
                            Quantity = 20
                        },
                        new
                        {
                            Id = new Guid("02ed6fb1-a1dd-4c14-8e2a-1f36558877f7"),
                            FridgeId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            ProductId = new Guid("d59a38ab-358a-4177-94c9-72f09f33fb32"),
                            Quantity = 17
                        },
                        new
                        {
                            Id = new Guid("659ae01a-3a5e-4fda-bc56-81f929b18232"),
                            FridgeId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            ProductId = new Guid("14a7eff5-ea22-4116-ba12-0dd5fc5a6577"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("42498fda-616c-47bd-b045-b98cbab20d0c"),
                            FridgeId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            ProductId = new Guid("1da4a8a8-5ff8-4cb5-81a7-a9fe895046c5"),
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("FridgeManager.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefaultQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1da4a8a8-5ff8-4cb5-81a7-a9fe895046c5"),
                            DefaultQuantity = 2,
                            Name = "Bread"
                        },
                        new
                        {
                            Id = new Guid("d59a38ab-358a-4177-94c9-72f09f33fb32"),
                            DefaultQuantity = 7,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("fce56e5f-6719-4b19-a00e-0ab6ad0630b8"),
                            DefaultQuantity = 3,
                            Name = "Yoghurt"
                        },
                        new
                        {
                            Id = new Guid("2e142de1-cd70-4f27-b982-107eae517d15"),
                            DefaultQuantity = 10,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("14a7eff5-ea22-4116-ba12-0dd5fc5a6577"),
                            DefaultQuantity = 1,
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = new Guid("40c30251-dbad-4078-8cae-db75cd69dfd0"),
                            DefaultQuantity = 25,
                            Name = "Mashroom"
                        },
                        new
                        {
                            Id = new Guid("0721b09e-4265-48b7-ac3a-fa83dd5b0748"),
                            DefaultQuantity = 4,
                            Name = "Chicken leg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FridgeManager.Domain.Models.Fridge", b =>
                {
                    b.HasOne("FridgeManager.Domain.Models.FridgeModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("FridgeManager.Domain.Models.FridgeProduct", b =>
                {
                    b.HasOne("FridgeManager.Domain.Models.Fridge", "Fridge")
                        .WithMany()
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FridgeManager.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FridgeManager.Domain.Models.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FridgeManager.Domain.Models.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FridgeManager.Domain.Models.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FridgeManager.Domain.Models.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
